legende:
/api/example (requestMethod) #path and method
	{requestBody}
	-> {returnBody}

#components

#status abfragen
api/components/getStatusOfAll (GET)
	{}
	->{Int componentId, Int componentStatusId}

#status ändern, 0 - entsperrt, 1 - gesperrt, 2 - dokumentupload möglich
api/components/changeStatus/{componentId}/{newStatusId} (POST) (oder GET?)
	{}
	->{}

#setze status übergangszeitpunkt
/api/components/setNextStatusTransition/{componentId}/{newStatusId} (POST)
	{String, transitionTime}
	->{}



#AGs

#erstelle AG
/api/ag/create (POST)
	{String name, String description, Blob freetext, Int minClass, Int maxClass, Int maxSpaces}
	-> {Int id}

#AG bearbeiten
api/ag/edit/{adId} (POST)
	{String name, String description, Blob freetext, Int minClass, Int maxClass, Int maxSpaces}
	-> {}

#AG löschen
api/ag/delete/{agId} (POST) (oder GET?)
	{}
	-> {}

#Hole alle AGs
/api/ag/getAll (GET)
	{}
	-> {Int id, String name, String description, Blob freetext, Int minClass, Int maxClass, Int maxSpaces}

#buche ag. wenn die role admin ist, wird der schüler in jedemfall eingetragen. ist die rolle ein schüler, wird in die nachrückliste eingetragen
/api/ag/enroll/{agId} (POST)
	{Int userId(or token), Int studentToEnrollId}
	->{Int bookingStatus} (0 - booking successfull, 1 - AG voll belegt, auf nachrückliste eingetragen)

/api/ag/removeEnrollment/{agId} (POST)
	{Int userId(or token), Int studentToRemoveId}
	->{}
	
#zeige alle AGs für Schüler
/api/ag/getAllAgsForStudent/{studentId} (GET)
	{
	->{Int id, String name, String description, Blob freetext}

#zeige liste an gebuchten AGs für Admins
/api/ag/getEnrollingLists (GET)
	{}
	->{[
	    Int agId,
	    String agName,
	    String agDescription,
	    ArrayOfInt enrolledStudents,
	 ]}




#Facharbeiten

#Thema festlegen
/api/facharbeit/chooseTopic (POST)
	{Int studentId, String topic, Int subjectId, Int choosenTeacherId, Int subjectTeacherId}
	->{}

#Thema für schüler holen
/api/facharbeit/getTopicForStudent/{Int studentId} (GET)
	{}
	->{String topic, Int subjectId, Int choosenTeacherId, Int subjectTeacherId}

#Thema bearbeiten
/api/facharbeit/editTopic (POST)
	{Int studentId, String topic, Int subjectId, Int choosenTeacherId, Int subjectTeacherId}
	->{}

#Arbeit hochladen
/api/facharbeit/uploadDocument (POST)
	{Int studentId, Blob document}
	->{string deliveryTime}

#alle Facharbeiten anzeigen lassen
/api/facharbeit/getAll (GET)
	{}
	->{ArrayOfObjects facharbeiten[Int studentId, String topic, String deliveryTime]}

#Facharbeiten runterladen
/api/facharbeit/downloadAll (GET)
	{}
	->{ArrayOfObjects facharbeiten[Int studentId, String topic, String deliveryTime, Blob document]}	



#Wahlpflichtfächer

#schüler wählt wpf
/api/wahlpflichtfach/choose (POST)
	{Int studentId, Int firstSubjectId, Int secondSubjectId} (Alternativ auch mit Array, wo zukünftig beliebig viele wpf. eingetragen werden können
	->{}

#Admin bearbeiter wpf von Schüler (Alternativ kann man die schnittstelle /api/wahlpflichtfach/choose und /api/wahlpflichtfach/edi auch zusammen legen, und von der rolle abhängig machen, ob es erlaubt ist die Daten zu ändern
/api/wahlpflichtfach/edit (POST)
	{Int studentId, Int firstSubjectId, Int secondSubjectId}
	-> {}


#Abiturprüfungen

#Schüler beantragen Thema
/api/abitur/applyForTopic (POST)
	{Int studentId, Int partnerStudentId, Int referenzfachId, Int bezugsfachId, Int responsibleTeacherId, String topic}
	->{Int examId}

#admin ändert Daten (ähnlich wie bei  wahlfplichtfach, man kann die beiden Schnittstellen auch zusammenlegen und von der Rolle abhängig machen
/api/abitur/editData/{Int studentId} (POST)
	{Int partnerStudentId, Int referenzfachId, Int bezugsfachId, Int responsibleTeacherId, String topic}
	->{}

#admin bekommt alle Schüler mit Abiprüfungen
/api/abitur/getAllExams (GET)
	{}
	->{ArrayOfObjects allExams[{Int examId, Int studentId, Int partnerStudentId, Int referenzfachId, Int bezugsfachId, Int responsibleTeacherId, String topic}]}

#Schüler sieht date zu seiner Prüfung ein
/api/abitur/getExamData/{Int studentId} GET
	{}
	-> {Int studentId, Int partnerStudentId, Int referenzfachId, Int bezugsfachId, Int responsibleTeacherId, String topic, Bool approved, String(optional) rejectionReason}

#hole alle Schüler (nötig um zu prüfen, ob alle Schüler abgegeben haben
/api/getAllStudents (GET)
	{}
	->{ArrayOfInt studentIds[Int studentId]}

#Admin setzt Genehmigungsstatus
/api/abitur/setApprovalState (POST)
	{Int examId, Bool approved, string(optional) reason}





