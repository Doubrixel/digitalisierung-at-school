legende:
/api/example (requestMethod) #path and method
	{requestBody}
	-> {returnBody}

#components

1 status abfragen
api/components/getStatusOfAll (GET)
	{}
	->{Int componentId, Int componentStatusId}

1 status ändern, 0 - entsperrt, 1 - gesperrt, 2 - dokumentupload möglich
api/components/changeStatus/{componentId}/{newStatusId} (POST) (oder GET?)
	{}
	->{}

2 (low priority) setze status übergangszeitpunkt
/api/components/setNextStatusTransition/{componentId}/{newStatusId} (POST)
	{String, transitionTime}
	->{}



#AGs

1 erstelle AG
/api/ag/create (POST)
	{String name, String description, Blob freetext, Int minClass, Int maxClass, Int maxSpaces}
	-> {Int id}

7 AG bearbeiten
api/ag/edit/{adId} (POST)
	{String name, String description, Blob freetext, Int minClass, Int maxClass, Int maxSpaces}
	-> {}

9 AG löschen
api/ag/delete/{agId} (POST) (oder GET?)
	{}
	-> {}

2 Hole alle AGs
/api/ag/getAll (GET)
	{}
	-> {Int id, String name, String description, Blob freetext, Int minClass, Int maxClass, Int maxSpaces, Int freeSpaces}

3 buche ag. wenn die role admin ist, wird der schüler in jedemfall eingetragen. ist die rolle ein schüler, wird in die nachrückliste eingetragen
/api/ag/enroll/{agId} (POST)
	{Int userId(or token), Int studentToEnrollId}
	->{Int bookingStatus} (0 - booking successfull, 1 - AG voll belegt, auf nachrückliste eingetragen)

8 /api/ag/removeEnrollment/{agId} (POST)
	{Int userId(or token), Int studentToRemoveId}
	->{}
	
4 zeige alle AGs für Schüler
/api/ag/getAllAgsForStudent/{studentId} (GET)
	{
	->{Int id, String name, String description, Blob freetext}

5 zeige liste an gebuchten AGs für Admins
/api/ag/getEnrollingLists (GET)
	{}
	->{[
	    Int agId,
	    String agName,
	    String agDescription,
	    ArrayOfInt enrolledStudents,
	 ]}




#Facharbeiten

1 Formdaten abfragen
/api/facharbeit/getFormData (GET)
	{}
	-> {Array of Objects teacherid, name, Array of objects fächerid name, 

2 Thema festlegen
/api/facharbeit/chooseTopic (POST)
	{Int studentId, String topic, Int subjectId, Int choosenTeacherId, Int subjectTeacherId}
	->{}

5 Thema für schüler holen
/api/facharbeit/getTopicForStudent/{Int studentId} (GET)
	{}
	->{String topic, Int subjectId, Int choosenTeacherId, Int subjectTeacherId}

4 Thema bearbeiten
/api/facharbeit/editTopic (POST)
	{Int studentId, String topic, Int subjectId, Int choosenTeacherId, Int subjectTeacherId}
	->{}

6 Arbeit hochladen
/api/facharbeit/uploadDocument (POST)
	{Int studentId, Blob document}
	->{string deliveryTime}

3 alle Facharbeiten anzeigen lassen
/api/facharbeit/getAll (GET)
	{}
	->{ArrayOfObjects facharbeiten[Int studentId, String topic, String deliveryTime]}

7 Facharbeiten runterladen
/api/facharbeit/downloadAll (GET)
	{}
	->{ArrayOfObjects facharbeiten[Int studentId, String topic, String deliveryTime, Blob document]}	



#Wahlpflichtfächer

1 hole alle wpf
/api/wahlpflichtfach/getAllWpf (GET)
	{}
	-> {Array of objects[{Int subjectId, String subjectName}]}

2 schüler wählt wpf
/api/wahlpflichtfach/choose/{studentId} (POST)
	{Array of int[subjectIds]}
	->{}
	
3 Admin bearbeitet wpf von Schüler (Alternativ kann man die schnittstelle /api/wahlpflichtfach/choose und /api/wahlpflichtfach/edit auch zusammen legen, und von der rolle abhängig machen, ob es erlaubt ist die Daten zu ändern
/api/wahlpflichtfach/edit (POST)
	{Int studentId, Int firstSubjectId, Int secondSubjectId}
	-> {}


#Abiturprüfungen

1 Formulardaten abfragen
/api/abitur/getFormData (GET)
	{Int studentId}
	-> {Array of Objects possiblePartnerStudents, name, Array of Objects referenzFachIds, name, Array of Objects bezugsfach id name, Array of Objects teachers id 		name} 

2 Schüler beantragen Thema
/api/abitur/applyForTopic (POST)
	{Int studentId, Int partnerStudentId, Int referenzfachId, Int bezugsfachId, Int responsibleTeacherId, String topic}
	->{Int examId}

7 admin ändert Daten (ähnlich wie bei  wahlfplichtfach, man kann die beiden Schnittstellen auch zusammenlegen und von der Rolle abhängig machen
/api/abitur/editData/{Int studentId} (POST)
	{Int partnerStudentId, Int referenzfachId, Int bezugsfachId, Int responsibleTeacherId, String topic}
	->{}

6 admin bekommt alle Schüler mit Abiprüfungen
/api/abitur/getAllExams (GET)
	{}
	->{ArrayOfObjects allExams[{Int examId, Int studentId, Int partnerStudentId, Int referenzfachId, Int bezugsfachId, Int responsibleTeacherId, String topic}]}

3 Schüler sieht daten zu seiner Prüfung ein
/api/abitur/getExamData/{Int studentId} GET
	{}
	-> {Int studentId, Int partnerStudentId, Int referenzfachId, Int bezugsfachId, Int responsibleTeacherId, String topic, Bool approved, String(optional) 		rejectionReason}

4 hole alle Schüler (nötig um zu prüfen, ob alle Schüler abgegeben haben
/api/getAllStudentsOfAbiturClass (GET)
	{}
	->{ArrayOfInt studentIds[Int studentId, Strong name, Bool applicationSubmitted]}

5 Admin setzt Genehmigungsstatus
/api/abitur/setApprovalState (POST)
	{Int examId, Bool approved, string(optional) reason}





