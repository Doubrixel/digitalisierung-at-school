legende:
/api/example (requestMethod) #path and method
	{requestBody}
	-> {returnBody}

#components

1 status abfragen
api/components/getTransitionDatesOfAll (GET)
	{}
	->[{
	     {String componentName, Date transitionDate1, Date transitionDate2, Date transitionDate3} 
	  }]

2 setze status übergangszeitdatum
/api/components/{componentName}/setTransitionDates (POST)
	{Date transitionDate1, Date transitionDate2, Date transitionDate3}
	->{}


#Facharbeiten

2 Thema festlegen
/api/facharbeit/chooseTopic (POST)
	{String topic, String subject, String choosenTeacher, String subjectTeacher}
	->{}


4 Thema bearbeiten
/api/facharbeit/editTopic (POST) (Nur für Admins)
	{String topic, String subject, String choosenTeacher, String subjectTeacher} 
	->{}

6 Arbeit hochladen
/api/facharbeit/uploadDocument (POST)
	{Blob document (pdf)}
	->{string deliveryTime}

3 alle Facharbeiten anzeigen lassen
/api/facharbeit/getAll (GET)
	{}
	->{ArrayOfObjects facharbeiten[{Int studentId, String topic, String deliveryTime}]}

7 Facharbeiten runterladen
/api/facharbeit/downloadAll (GET)
	{}
	->{ArrayOfObjects facharbeiten[{Int studentId, String studentName, String topic, String deliveryTime, Blob document}]}	

// die schnittstelle wirklich nötig? erstmal nicht umsetzen
8 Thema für schüler holen
/api/facharbeit/getTopicForStudent/{Int studentId} (GET)
	{}
	->{String topic, Int subjectId, Int choosenTeacherId, Int subjectTeacherId}


#Abiturprüfungen

2 Schüler beantragen Thema 
(Alle Parameter sollten optional sein, da die Schnittstelle auch für Änderungen genutzt wird, und bei Änderungen möglicherweise nur ein Parameter (der neue) übergeben wird)
/api/abitur/applyForTopic (POST) (Nur für Schüler)
	{String examType (one of ['PP', 'BLL']), partnerStudentName, String updatedPartnerStudentName,
	String referenzfach, String updatedReferenzfach, String bezugsfach, String updatedBezugsfach, String tutor, String updatedTutor, String examiner, String updatedExaminer,
	String topicArea, String updatedTopicArea, String problemQuestion, String updatedProblemQuestion, String presentationForm, String updatedPresentationForm,
	int submitNumber, Date submitDate
	}
	->{Int id}

7 admin ändert Daten
(Alle Parameter sollten optional sein, die Schnittstelle für Änderungen genutzt wird, und bei Änderungen möglicherweise nur ein Parameter (der neue) übergeben wird)
/api/abitur/editData/{Int examId} (POST)
	{String examType (one of ['PP', 'BLL']), String updatedPartnerStudentName,
	String updatedReferenzfach, String updatedBezugsfach, String updatedTutor, String updatedExaminer,
	String updatedTopicArea, String updatedProblemQuestion, String updatedPresentationForm
	}
	->{}

6 admin bekommt alle Schüler mit Abiprüfungen
/api/abitur/getAllExams (GET)
	{}
	->{ArrayOfObjects allExams[
		{Int examId, String examType (one of ['PP', 'BLL']), partnerStudentName, 
		String updatedPartnerStudentName, String referenzfach, String updatedReferenzfach, String bezugsfach, String updatedBezugsfach, String tutor,
		String updatedTutor, String examiner, String updatedExaminer, String topicArea, String updatedTopicArea, String problemQuestion,
		String updatedProblemQuestion, String presentationForm, 
		String updatedPresentationForm, Boolean approved, String studentName, Int studentId, String firstSubmissionDate, String finalSubmissionDate}
	]}

3 Schüler sieht daten zu seiner Prüfung ein
/api/abitur/getExamData GET (Nur für Schüler)
	{}
	-> {
	String examType (one of ['PP', 'BLL']), partnerStudentName, 
	String updatedPartnerStudentName, String referenzfach, String updatedReferenzfach, String bezugsfach, String updatedBezugsfach, String tutor,
	String updatedTutor, String examiner,
	String updatedExaminer, String topicArea, String updatedTopicArea, String problemQuestion, String updatedProblemQuestion, String presentationForm, 
	String updatedPresentationForm, Bool approved, String rejectionReason
	}

5 Admin setzt Genehmigungsstatus
/api/abitur/setApprovalState (POST)
	{Int examId, Bool approved, string(optional) reason}





