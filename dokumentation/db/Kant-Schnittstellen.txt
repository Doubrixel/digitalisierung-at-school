legende:
/api/example (requestMethod) #path and method
	{requestBody}
	-> {returnBody}

#components

1 status abfragen
api/components/getStatusOfAll (GET)
	{}
	->[{Int componentId, Int componentStatusId}]

1 status ändern, 0 - entsperrt, 1 - gesperrt, 2 - dokumentupload möglich
api/components/{componentId}/setStatus/{newStatusId} (PUT)
	{}
	->{}

2 (low priority) setze status übergangszeitpunkt
/api/components/{componentId}/setNextStatusTransition/{newStatusId} (PUT)
	{String, transitionTime}
	->{}



#AGs

1 erstelle AG
/api/ag/create (POST)
	{String name, String description, Blob freetext, Int minClass, Int maxClass, Int maxSpaces}
	-> {Int id}

7 AG bearbeiten
api/ag/edit/{adId} (POST)
	{String name, String description, Blob freetext, Int minClass, Int maxClass, Int maxSpaces}
	-> {}

9 AG löschen
api/ag/delete/{agId} (POST) (oder GET?)
	{}
	-> {}

2 Hole alle AGs
/api/ag/getAll (GET)
	{}
	-> {Int id, String name, String description, Blob freetext, Int minClass, Int maxClass, Int maxSpaces, Int freeSpaces}

3 buche ag. wenn die role admin ist, wird der schüler in jedemfall eingetragen. ist die rolle ein schüler, wird in die nachrückliste eingetragen
/api/ag/enroll/{agId} (POST)
	{ (Optional) Int studentToEnrollId} (Wenn studentToEnrollId übergeben wird, muss geprüft werden ob der sender ein admin ist. weil nur admins können andere user enrollen)
	->{Int bookingStatus} (0 - booking successfull, 1 - AG voll belegt, auf nachrückliste eingetragen)

8 /api/ag/removeEnrollment/{agId} (POST)
	{(Optional) Int studentToRemoveId} (Wenn studentToRemoveId übergeben wird, muss geprüft werden ob der sender ein admin ist. weil nur admins können andere user deleten)
	->{}
	
4 zeige alle AGs für Schüler
/api/ag/getAllAgsForStudent/{studentId} (GET)
	{}
	->{Int agId, String name, String description, Blob freetext}

5 zeige liste an gebuchten AGs für Admins
/api/ag/getEnrollingLists (GET)
	{}
	->{Array of Objects enrollingList [{Int agId, String agName, String agDescription, ArrayOfInt enrolledStudents}]}




#Facharbeiten

1 Formdaten abfragen
/api/facharbeit/getFormData (GET)
	{}
	-> {Array of Objects [{teacherId, teacherName}], Array of objects [{faecherId, facherName}]} 

2 Thema festlegen
/api/facharbeit/chooseTopic (POST)
	{String topic, Int subjectId, Int choosenTeacherId, Int subjectTeacherId}
	->{}

5 Thema für schüler holen
/api/facharbeit/getTopicForStudent/{Int studentId} (GET)
	{}
	->{String topic, Int subjectId, Int choosenTeacherId, Int subjectTeacherId}

4 Thema bearbeiten
/api/facharbeit/editTopic (POST)
	{Int studentId, String topic, Int subjectId, Int choosenTeacherId, Int subjectTeacherId} (Wenn studentID übergeben wird, muss geprüft werden, ob der sender ein admin ist. weil nur admins können topics von anderen editieren)
	->{}

6 Arbeit hochladen
/api/facharbeit/uploadDocument (POST)
	{Blob document}
	->{string deliveryTime}

3 alle Facharbeiten anzeigen lassen
/api/facharbeit/getAll (GET)
	{}
	->{ArrayOfObjects facharbeiten[{Int studentId, String topic, String deliveryTime}]}

7 Facharbeiten runterladen
/api/facharbeit/downloadAll (GET)
	{}
	->{ArrayOfObjects facharbeiten[{Int studentId, String studentName, String topic, String deliveryTime, Blob document}]}	



#Wahlpflichtfächer

1 hole alle wpf
/api/wahlpflichtfach/getAllWpf (GET)
	{}
	-> {Array of objects[{Int subjectId, String subjectName}]}

2 schüler wählt wpf
/api/wahlpflichtfach/choose (POST)
	{Array of int[subjectIds]}
	->{}
	
3 Admin bearbeitet wpf von Schüler
/api/wahlpflichtfach/edit (POST)
	{Int studentId, Int firstSubjectId, Int secondSubjectId}
	-> {}


#Abiturprüfungen

2 Schüler beantragen Thema 
(Alle Parameter sollten optional sein, da die Schnittstelle auch für Änderungen genutzt wird, und bei Änderungen möglicherweise nur ein Parameter (der neue) übergeben wird)
/api/abitur/applyForTopic (POST) (Nur für Schüler)
	{String examType (one of ['PP', 'BLL']), partnerStudentName, String updatedPartnerStudentName,
	String referenzfach, String updatedReferenzfach, String bezugsfach, String updatedBezugsfach, String examiner, String updatedExaminer,
	String topicArea, String updatedTopicArea, String problemQuestion, String updatedProblemQuestion, String presentationForm, String updatedPresentationForm
	}
	->{Int id}

7 admin ändert Daten
(Alle Parameter sollten optional sein, die Schnittstelle für Änderungen genutzt wird, und bei Änderungen möglicherweise nur ein Parameter (der neue) übergeben wird)
/api/abitur/editData/{Int examId} (POST)
	{String examType (one of ['PP', 'BLL']), partnerStudentName, String referenzfach, String bezugsfach, String examiner,
	String topicArea, String problemQuestion, String presentationForm
	}
	->{}

6 admin bekommt alle Schüler mit Abiprüfungen
/api/abitur/getAllExams (GET)
	{}
	->{ArrayOfObjects allExams[
		{Int examId, String examType (one of ['PP', 'BLL']), partnerStudentName, 
		String updatedPartnerStudentName, String referenzfach, String updatedReferenzfach, String bezugsfach, String updatedBezugsfach, String examiner,
		String updatedExaminer, String topicArea, String updatedTopicArea, String problemQuestion, String updatedProblemQuestion, String presentationForm, 
		String updatedPresentationForm, Boolean approved}
	]}

3 Schüler sieht daten zu seiner Prüfung ein
/api/abitur/getExamData GET (Nur für Schüler)
	{}
	-> {
	String examType (one of ['PP', 'BLL']), partnerStudentName, 
	String updatedPartnerStudentName, String referenzfach, String updatedReferenzfach, String bezugsfach, String updatedBezugsfach, String examiner,
	String updatedExaminer, String topicArea, String updatedTopicArea, String problemQuestion, String updatedProblemQuestion, String presentationForm, 
	String updatedPresentationForm, Bool approved, String rejectionReason
	}

5 Admin setzt Genehmigungsstatus
/api/abitur/setApprovalState (POST)
	{Int examId, Bool approved, string(optional) reason}





